import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import numpy as np
import torch
import torch.nn as nn
from torch.optim import SGD
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
import os

# Define the Neural Network Class
class MyNeuralNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.Matrix1 = nn.Linear(28**2, 100)
        self.Matrix2 = nn.Linear(100, 50)
        self.Matrix3 = nn.Linear(50, 10)
        self.R = nn.ReLU()

    def forward(self, x):
        x = x.view(-1, 28**2)
        x = self.R(self.Matrix1(x))
        x = self.R(self.Matrix2(x))
        x = self.Matrix3(x)
        return x.squeeze()

# Define the Dataset Class
class CTDataset(Dataset):
    def __init__(self, filepath):
        self.x, self.y = torch.load(filepath)
        self.x = self.x / 255.
        self.y = F.one_hot(self.y, num_classes=10).to(float)

    def __len__(self):
        return self.x.shape[0]

    def __getitem__(self, ix):
        return self.x[ix], self.y[ix]

# Check if the trained model file exists
model_path = 'my_model.pth'
if os.path.exists(model_path):
    # Load the trained model
    loaded_model = MyNeuralNet()
    loaded_model.load_state_dict(torch.load(model_path))
    loaded_model.eval()
    print("Model loaded successfully.")
else:
    # Save and Load Data, Define Dataset, DataLoader
    x, y = torch.load('/Users/Asap/Downloads/MNIST/processed/training.pt')
    y_new = F.one_hot(y, num_classes=10)

    train_ds = CTDataset('/Users/Asap/Downloads/MNIST/processed/training.pt')
    train_dl = DataLoader(train_ds, batch_size=5)

    L = nn.CrossEntropyLoss()

    # Training Function
def train_model(dl, f, n_epochs=20):
    opt = SGD(f.parameters(), lr=0.01)

    losses = []
    epochs = []
    for epoch in range(n_epochs):
        print(f'Epoch {epoch}')
        N = len(dl)
        for i, (x, y) in enumerate(dl):
            opt.zero_grad()
            loss_value = L(f(x), y)
            loss_value.backward()
            opt.step()
            epochs.append(epoch + i / N)
            losses.append(loss_value.item())

    # Save the trained model
    torch.save(f.state_dict(), model_path)
    print("Model trained and saved.")

# Assuming you want to train a new model, not the loaded_model
if not os.path.exists(model_path):
    new_model = MyNeuralNet()
    train_model(train_dl, new_model)


# Load the test data
x, y = torch.load('/Users/Asap/Downloads/MNIST/processed/training.pt')
test_ds = CTDataset('/Users/Asap/Downloads/MNIST/processed/test.pt')

from sklearn.metrics import confusion_matrix
import numpy as np

def test_model_with_confusion_matrix(model, test):
    model.eval()
    all_true_labels = []
    all_predicted_labels = []

    with torch.no_grad():
        for x, y in test:
            outputs = model(x)
            _, predicted = torch.max(outputs.data, 1)

            # Extract true labels from one-hot encoding
            true_labels = torch.argmax(y, dim=1).cpu().numpy()

            all_true_labels.extend(true_labels)
            all_predicted_labels.extend(predicted.cpu().numpy())

    accuracy = sum(np.array(all_true_labels) == np.array(all_predicted_labels)) / len(all_true_labels)
    print(f'Test Accuracy: {accuracy * 100:.2f}%')

    # Create confusion matrix
    cm = confusion_matrix(all_true_labels, all_predicted_labels)
    
    # Print confusion matrix
    print("Confusion Matrix:")
    print(cm)

# Assuming you already have the DataLoader for the test dataset
test = DataLoader(test_ds, batch_size=10)

# Call the test_model_with_confusion_matrix function with the loaded_model and test DataLoader
test_model_with_confusion_matrix(loaded_model, test)


# Create the GUI Class
class DigitRecognizerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Digit Recognizer")

        self.canvas = tk.Canvas(root, width=300, height=300, bg="white")
        self.canvas.pack(pady=20)

        self.label = tk.Label(root, text="Prediction: None", font=("Helvetica", 16))
        self.label.pack()

        self.load_button = tk.Button(root, text="Load Image", command=self.load_image)
        self.load_button.pack()

        self.predict_button = tk.Button(root, text="Predict", command=self.predict)
        self.predict_button.pack()

        self.image_path = None

    def load_image(self):
        self.image_path = filedialog.askopenfilename()
        if self.image_path:
            image = Image.open(self.image_path).resize((300, 300)).convert('L')
            self.image = ImageTk.PhotoImage(image)
            self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image)

    def predict(self):
        if self.image_path:
            image = Image.open(self.image_path).resize((28, 28)).convert('L')
            image_array = np.array(image) / 255.0
            image_array = image_array.reshape((1, 28, 28, 1))

            # Use loaded_model for prediction
            prediction = loaded_model(torch.Tensor(image_array))
            predicted_digit = torch.argmax(prediction).item()

            self.label.config(text=f"Prediction: {predicted_digit}")

# Tkinter main loop
if __name__ == "__main__":
    root = tk.Tk()
    app = DigitRecognizerApp(root)
    root.mainloop()
